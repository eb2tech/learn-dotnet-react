// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: weather.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "weather";

/** Empty request */
export interface WeatherRequest {
}

export interface WeatherResponse {
  forecasts: WeatherData[];
}

export interface WeatherData {
  date: string;
  temperatureC: number;
  temperatureF: number;
  summary: string;
}

function createBaseWeatherRequest(): WeatherRequest {
  return {};
}

export const WeatherRequest: MessageFns<WeatherRequest> = {
  encode(_: WeatherRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WeatherRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWeatherRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): WeatherRequest {
    return {};
  },

  toJSON(_: WeatherRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<WeatherRequest>, I>>(base?: I): WeatherRequest {
    return WeatherRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WeatherRequest>, I>>(_: I): WeatherRequest {
    const message = createBaseWeatherRequest();
    return message;
  },
};

function createBaseWeatherResponse(): WeatherResponse {
  return { forecasts: [] };
}

export const WeatherResponse: MessageFns<WeatherResponse> = {
  encode(message: WeatherResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.forecasts) {
      WeatherData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WeatherResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWeatherResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.forecasts.push(WeatherData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WeatherResponse {
    return {
      forecasts: globalThis.Array.isArray(object?.forecasts)
        ? object.forecasts.map((e: any) => WeatherData.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WeatherResponse): unknown {
    const obj: any = {};
    if (message.forecasts?.length) {
      obj.forecasts = message.forecasts.map((e) => WeatherData.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WeatherResponse>, I>>(base?: I): WeatherResponse {
    return WeatherResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WeatherResponse>, I>>(object: I): WeatherResponse {
    const message = createBaseWeatherResponse();
    message.forecasts = object.forecasts?.map((e) => WeatherData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWeatherData(): WeatherData {
  return { date: "", temperatureC: 0, temperatureF: 0, summary: "" };
}

export const WeatherData: MessageFns<WeatherData> = {
  encode(message: WeatherData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.date !== "") {
      writer.uint32(10).string(message.date);
    }
    if (message.temperatureC !== 0) {
      writer.uint32(16).int32(message.temperatureC);
    }
    if (message.temperatureF !== 0) {
      writer.uint32(24).int32(message.temperatureF);
    }
    if (message.summary !== "") {
      writer.uint32(34).string(message.summary);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WeatherData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWeatherData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.date = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.temperatureC = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.temperatureF = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.summary = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WeatherData {
    return {
      date: isSet(object.date) ? globalThis.String(object.date) : "",
      temperatureC: isSet(object.temperatureC) ? globalThis.Number(object.temperatureC) : 0,
      temperatureF: isSet(object.temperatureF) ? globalThis.Number(object.temperatureF) : 0,
      summary: isSet(object.summary) ? globalThis.String(object.summary) : "",
    };
  },

  toJSON(message: WeatherData): unknown {
    const obj: any = {};
    if (message.date !== "") {
      obj.date = message.date;
    }
    if (message.temperatureC !== 0) {
      obj.temperatureC = Math.round(message.temperatureC);
    }
    if (message.temperatureF !== 0) {
      obj.temperatureF = Math.round(message.temperatureF);
    }
    if (message.summary !== "") {
      obj.summary = message.summary;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WeatherData>, I>>(base?: I): WeatherData {
    return WeatherData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WeatherData>, I>>(object: I): WeatherData {
    const message = createBaseWeatherData();
    message.date = object.date ?? "";
    message.temperatureC = object.temperatureC ?? 0;
    message.temperatureF = object.temperatureF ?? 0;
    message.summary = object.summary ?? "";
    return message;
  },
};

export interface WeatherService {
  GetWeatherForecast(request: WeatherRequest): Promise<WeatherResponse>;
}

export const WeatherServiceServiceName = "weather.WeatherService";
export class WeatherServiceClientImpl implements WeatherService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || WeatherServiceServiceName;
    this.rpc = rpc;
    this.GetWeatherForecast = this.GetWeatherForecast.bind(this);
  }
  GetWeatherForecast(request: WeatherRequest): Promise<WeatherResponse> {
    const data = WeatherRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetWeatherForecast", data);
    return promise.then((data) => WeatherResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
