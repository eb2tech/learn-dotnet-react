// @generated by protoc-gen-es v1.10.1 with parameter "target=ts,import_extension=.js"
// @generated from file weather.proto (package weather, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Empty request
 *
 * @generated from message weather.WeatherRequest
 */
export class WeatherRequest extends Message<WeatherRequest> {
  constructor(data?: PartialMessage<WeatherRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "weather.WeatherRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WeatherRequest {
    return new WeatherRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WeatherRequest {
    return new WeatherRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WeatherRequest {
    return new WeatherRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WeatherRequest | PlainMessage<WeatherRequest> | undefined, b: WeatherRequest | PlainMessage<WeatherRequest> | undefined): boolean {
    return proto3.util.equals(WeatherRequest, a, b);
  }
}

/**
 * @generated from message weather.WeatherResponse
 */
export class WeatherResponse extends Message<WeatherResponse> {
  /**
   * @generated from field: repeated weather.WeatherData forecasts = 1;
   */
  forecasts: WeatherData[] = [];

  constructor(data?: PartialMessage<WeatherResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "weather.WeatherResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "forecasts", kind: "message", T: WeatherData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WeatherResponse {
    return new WeatherResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WeatherResponse {
    return new WeatherResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WeatherResponse {
    return new WeatherResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WeatherResponse | PlainMessage<WeatherResponse> | undefined, b: WeatherResponse | PlainMessage<WeatherResponse> | undefined): boolean {
    return proto3.util.equals(WeatherResponse, a, b);
  }
}

/**
 * @generated from message weather.WeatherData
 */
export class WeatherData extends Message<WeatherData> {
  /**
   * @generated from field: string date = 1;
   */
  date = "";

  /**
   * @generated from field: int32 temperature_c = 2;
   */
  temperatureC = 0;

  /**
   * @generated from field: int32 temperature_f = 3;
   */
  temperatureF = 0;

  /**
   * @generated from field: string summary = 4;
   */
  summary = "";

  constructor(data?: PartialMessage<WeatherData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "weather.WeatherData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "temperature_c", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "temperature_f", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "summary", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WeatherData {
    return new WeatherData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WeatherData {
    return new WeatherData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WeatherData {
    return new WeatherData().fromJsonString(jsonString, options);
  }

  static equals(a: WeatherData | PlainMessage<WeatherData> | undefined, b: WeatherData | PlainMessage<WeatherData> | undefined): boolean {
    return proto3.util.equals(WeatherData, a, b);
  }
}

